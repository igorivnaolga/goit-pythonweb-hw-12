[project]
name = "goit-pythonweb-hw-08"
version = "0.1.0"
description = ""
authors = [
    {name = "igorivnaolga", email = "igorivnaolga@gmail.com"},
]
readme = "README.md"
requires-python = ">=3.12"

[tool.poetry]
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"

requests = ">=2.32.3,<3.0.0"
uvicorn = "^0.34.0"
fastapi = "^0.115.12"
sqlalchemy = "^2.0.39"
pydantic-settings = "^2.8.1"
alembic-postgresql-enum = "^1.7.0"
alembic = "^1.15.1"
psycopg2 = "^2.9.10"
asyncpg = "^0.30.0"
greenlet = "^3.1.1"
httpx = "^0.28.1"
pydantic = {extras = ["email"], version = "^2.11.5"}
libgravatar = "^1.0.4"
passlib = "1.7.4"
python-jose = {extras = ["cryptography"], version = "^3.5.0"}
python-multipart = "^0.0.20"
bcrypt = "3.2.0"
fastapi-mail = "^1.5.0"
logging = "^0.4.9.6"
slowapi = "^0.1.9"
cloudinary = "^1.44.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.9.9"
pytest = "^8.3.5"
coverage = "^7.7.1"
testcontainers = "^4.9.2"
anyio = "^4.9.0"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
#    "migrations",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["ALL"]
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
ignore = [
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ARG002",  # Unused method argument: `args`
    "ARG004",  # Unused static method argument: `kwargs`
    "B008",    # Do not perform function call `Depends` in argument defaults; instead, perform the call ...
    "COM812",
    "COM819",  # prohibited-trailing-comma
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in `__init__`
    "D203",    # 1 blank line required before class docstring
    "D205",    # 1 blank line required between summary line and description
    "D211",    # one-blank-line-before-class
    "D212",    # multi-line-summary-second-line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D415",    # First line should end with a period
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "ERA001",  # Found commented-out code
    "FA100",   # Add `from __future__ import annotations` to simplify `typing.Union`
    "FA102",   # Add `from __future__ import annotations`
    "FAST002", # Identifies FastAPI routes with deprecated uses of Depends or similar.
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FIX002",  # Line contains TO_DO, consider resolving the issue
    "G004",    # Logging statement uses f-string
    "ISC001",
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PT003",   # scope="function" in fixtures is default
    "SLF001",  # Private member accessed: `_engine`
    "TD003",   # Missing issue link on the line following this TODO
    # TODO -> try to fix next errors
    "B904",
    "ANN201",
]

[tool.ruff.lint.per-file-ignores]
"*test*" = [
    "ANN001",  # Missing type annotation for function argument `<fixture-name>`
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR2004", # Magic value used in comparison
    "PT019",   # Fixture `<name>` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
    "S101",    # Use of `assert` detected
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


